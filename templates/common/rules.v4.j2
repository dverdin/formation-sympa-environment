# This file is managed by Ansible
# IPv4 firewall configuration
# TODO: Further restrict access based on the actual deployment

*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

# Disable forwarding
-P FORWARD DROP
# Allow any outgoing
-P OUTPUT ACCEPT
# Allow all localhost
-A INPUT -i lo -j ACCEPT
# Allow incoming trafic related to existing "connections"
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
# Allow ICMP
-A INPUT -p icmp -j ACCEPT

### Add rules for opening additional ports here:

# Allow TCP connections to port 22 (SSH) from ANYWHERE
-A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT

{% if 'sympa' in group_names %}
# registry server
-A INPUT -p tcp --dport 443 -m state --state NEW -j ACCEPT
-A INPUT -p tcp --dport 80 -m state --state NEW -j ACCEPT
-A INPUT -p tcp --dport 25 -s {{ sympa_incoming_smtp }} -m state --state NEW -j ACCEPT
{% endif %}

### End of configuration

{# BEGIN JINJA2 COMMENT
Useful Ansible patterns

Note: The examples below assume that each host has a variable "host_ipv4" defined. This is not a standard Ansible
      variable but a convention adopted in "ansible-tools". The "host_ipv4" variable must be set manually for each
      host, either in the inventory or by using host_vars.
      When you want to use the Ansible facts you would use "hostvars[host].ansible_default_ipv4.address" and ensure
      that ansible has contacted each host to discover facts before.

{% if 'sympa' in group_names %}
# registry server
-A INPUT -p tcp --dport 443 -m state --state NEW -j ACCEPT
-A INPUT -p tcp --dport 80 -m state --state NEW -j ACCEPT
{% endif %}

Allow access from all hosts in the group named <group> to <port>
{% for host in groups['<group>'] %}
{% if hostvars[host].host_ipv4 != host_ipv4 %}
-A INPUT -p tcp --dport <port> -m state --state NEW -s {{ hostvars[host].host_ipv4 }} -j ACCEPT
{% endif %}
{% endfor %}

Get a comma separated list of the IPs of the hosts in the group named <group>
{% for host in groups['<group>'] %}{{ hostvars[host]['host_ipv4'] }}{% if not loop.last %},{% endif %}{% endfor %}


### Firewall rule syntax

# To open a TCP <port> for world:
-A INPUT -p tcp --dport <port> -m state --state NEW -j ACCEPT

# To open <port> specific port for an <ip address> (range)
# <ip address> can be a single address: 10.0.0.1 or a range: 10.0.0.0/28
-A INPUT -p tcp --dport <port> -m state --state NEW -s <ip address> -j ACCEPT

# Multiple ports:
-A INPUT -p tcp -m multiport --dports <port>,<port>,... -m state --state NEW -j ACCEPT

END JINJA2 COMMENT #}

# End of INPUT chain
-P INPUT DROP

COMMIT
# Note: there must be a newline after the COMMIT
